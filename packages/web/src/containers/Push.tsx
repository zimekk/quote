import React, { useCallback, useEffect, useState } from "react";
import styles from "./Push.module.scss";

// This function is needed because Chrome doesn't accept a base64 encoded string
// as value for applicationServerKey in pushManager.subscribe yet
// https://bugs.chromium.org/p/chromium/issues/detail?id=802280
function urlBase64ToUint8Array(base64String) {
  var padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");

  var rawData = window.atob(base64);
  var outputArray = new Uint8Array(rawData.length);

  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

export default function Section() {
  const [notification, setNotification] = useState(() => ({
    delay: "5",
    ttl: "0",
  }));
  const [subscription, setSubscription] = useState(null);

  useEffect(() => {
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.ready
        .then(function (registration) {
          // Use the PushManager to get the user's subscription to the push service.
          return registration.pushManager
            .getSubscription()
            .then(async function (subscription) {
              // If a subscription was found, return it.
              if (subscription) {
                return subscription;
              }

              // Get the server's public key
              const response = await fetch("./vapidPublicKey");
              const vapidPublicKey = await response.text();
              // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
              // urlBase64ToUint8Array() is defined in /tools.js
              const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

              // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
              // send notifications that don't have a visible effect for the user).
              return registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: convertedVapidKey,
              });
            });
        })
        .then((subscription) => setSubscription(subscription));
    }
  }, []);

  useEffect(() => {
    if (subscription) {
      // Send the subscription details to the server using the Fetch API.
      fetch("./register", {
        method: "post",
        headers: {
          "Content-type": "application/json",
        },
        body: JSON.stringify({
          subscription,
        }),
      });
    }
  }, [subscription]);

  const handleChangeValue = useCallback((e) => {
    const { name, value } = e.target;
    setNotification((notification) => ({
      ...notification,
      [name]: value,
    }));
  }, []);

  const handleSendNotification = useCallback(() => {
    const { delay, ttl } = notification;
    // Ask the server to send the client a notification (for testing purposes, in actual
    // applications the push notification is likely going to be generated by some event
    // in the server).
    fetch("./sendNotification", {
      method: "post",
      headers: {
        "Content-type": "application/json",
      },
      body: JSON.stringify({
        subscription,
        delay,
        ttl,
      }),
    });
  }, [notification, subscription]);

  return (
    <section className={styles.Section}>
      <h2>Push</h2>
      <p>
        This demo shows how to register for push notifications and how to send
        them.
      </p>
      <form>
        Notification delay:{" "}
        <input
          id="notification-delay"
          type="number"
          name="delay"
          value={notification.delay}
          onChange={handleChangeValue}
        />{" "}
        seconds Notification Time-To-Live:{" "}
        <input
          id="notification-ttl"
          type="number"
          name="ttl"
          value={notification.ttl}
          onChange={handleChangeValue}
        />{" "}
        seconds
      </form>
      <button id="doIt" onClick={handleSendNotification}>
        Try to conquer Italy!
      </button>
    </section>
  );
}
